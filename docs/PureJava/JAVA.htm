<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=ks_c_5601-1987">
<meta name=Generator content="Microsoft Word 11 (filtered)">
<title>JAVA(james gosling,Arthut Van, Andy Bechtolsheim란 뭔가</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:바탕;
	panose-1:2 3 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:굴림;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:"\@굴림";
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:"\@바탕";
	panose-1:2 3 6 0 0 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-autospace:none;
	word-break:break-hangul;
	font-size:10.0pt;
	font-family:바탕;}
 /* Page Definitions */
 @page Section1
	{size:612.0pt 792.0pt;
	margin:99.25pt 3.0cm 3.0cm 3.0cm;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=KO style='text-justify-trim:punctuation'>

<div class=Section1>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
style='font-family:굴림'>JAVA(james gosling,Arthut Van, Andy Bechtolsheim)란 뭔가?</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US style='font-family:굴림'>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
style='font-family:굴림'>[등장배경]</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
style='font-family:굴림'>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
style='font-family:굴림'>네트 웍에 강해야 하고<span lang=EN-US>, </span>플랫폼 독립성이 있으면 좋고<span
lang=EN-US> , </span>안정적이어야 하고<span lang=EN-US>, </span>바이러스로부터 안전해야 하는 프로그래밍 언어에
대한 필요성이 그 어느 곳보다<span lang=EN-US> &quot;</span>웹<span lang=EN-US>&quot;</span>에서
절실히 요구되었던 것이죠<span lang=EN-US>.</span></span><span style='font-family:굴림'>기존의 월드
와이드 웹 서비스가 가지고 있던 한계 극복의 필요성과 호환성이 높고 간단하고 정제된 언어의 필요성, 사용자와 상호 대화가 가능한 기능 요소의 필요성
때문이었다. </span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
style='font-family:굴림'>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
style='font-family:굴림'>[자바개발]</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
style='font-family:굴림'>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
style='font-family:굴림'>Java는 처음(1991)에는 C 언어를 모델로 개발 시작하였다. Sun Micro Systems의 제임스
고슬링이 소비자 전자제품을 위해 연구 시작하였고... 개발 그룹 코드명 Green (제임스 코슬링) 후에 JavaSoft사로 Sun의 자회사로
독립 하여 가전제품의 자동화 구현 측면( 인공지능, 퍼지 등 )에서 어떠한 CPU칩에서나 작동할 수 있고, 또한 Network로 연결하여 통제할
수 있는 프로그램 언어를 만든다는 취지로 시작했으며, 그 명칭은Ock라고 불렀음.. Ock는 결국 실패를 했지만 플랫폼 독립적인 기능이 인터넷의
기능과 조화를 이룬다는 점을 밝혀져 Java라는 이름으로 개칭되면서 Internet 프로그램으로서 자리를 잡게 된다. NetWork환경 구현에
약하다는 C언어의 약점을 극복하기 위해 새로운 개념의 프로그램이 개발되었다. ( Internet환경도 NetWork 환경임을 알면 자바가 왜 인터넷
프로그래밍 언어로 자리를 빨리 잡게 되었는지 알 수 있다. )완성된 자바는 93년 Interactive TV에 적용 95년 SUN World
95에서 &quot;자바(Java)&quot;와 &quot;핫자바(HotJava)&quot;를 발표하였다.</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
style='font-family:굴림'>Java는 1995년 JDK1.0.x버전을 발표하며 본격적인 자바 개발환경을 지원하게 되었고.
Netscape와 라이센스 계약을 통해 Netsacpe 브라우저에서 자바가 시행됨으로서 전 세계로 자바가 확산하게 되었다. Java는 1997년에
새로운 모습을 갖추게 된다. ( JDK 1.1.x 버전의 발표 )보다 완전한 프로그랭 언어의 모습을 갖추고. JDK 1.1x 속에 내장된 자바
해석기가 기존의 해석기보다 2배의 속도 자랑하게 된것이다...</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
style='font-family:굴림'>[Java 이름의 유래]</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
style='font-family:굴림'>*자바라는 이름은 어느 지역 커피점에서 커피 이름 &quot;자바&quot;에서 유래되었다. (잠들지
않는 인터넷과 의미가 상통)</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US style='font-family:굴림'>&nbsp;</span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%;border:outset #E3E3E3 1.0pt'>
 <tr style='height:16.5pt'>
  <td width="90%" style='width:90.0%;border:inset #E3E3E3 1.0pt;background:
  #F9F9F9;padding:3.0pt 3.0pt 3.0pt 3.0pt;height:16.5pt'>
  <p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><b><span
  style='font-family:굴림'>자바의 단점과 해결책 </span></b></p>
  </td>
 </tr>
</table>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US style='font-family:굴림;display:none'>&nbsp;</span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%;border:outset #E3E3E3 1.0pt'>
 <tr style='height:16.5pt'>
  <td width="10%" style='width:10.0%;border:inset #E3E3E3 1.0pt;background:
  #E3E3E3;padding:3.0pt 3.0pt 3.0pt 3.0pt;height:16.5pt'>
  <p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
  style='font-family:굴림'>　</span></p>
  </td>
  <td width="80%" style='width:80.0%;border:inset #E3E3E3 1.0pt;background:
  #F9F9F9;padding:3.0pt 3.0pt 3.0pt 3.0pt;height:16.5pt'>
  <p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
  style='font-family:굴림'>자바는 몇 가지 단점을 가지고 있는데<span lang=EN-US>, </span>자바의 단점이라
  할 수 있는 문제들과 그에 대해 자바에서는 어떤 기술 또는 방법을 이용하여 해결하려 하고 있는 지에 대해 살펴보도록 하겠습니다<span
  lang=EN-US>. </span></span></p>
  <p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
  style='font-family:굴림'>먼저<span lang=EN-US>, </span>자바는 기계어 코드를 직접 실행시키는 것이 아니고<span
  lang=EN-US>, </span>플랫폼 독립적인 중간 코드 형태인 바이트코드를 자바 가상머신이 해석하여 실행시키는 인터프리터 방식을 취하고
  있으므로 느린 수행 시간을 갖습니다<span lang=EN-US>. </span>일반적으로<span lang=EN-US> C</span>보다
  평균<span lang=EN-US> 8</span>배 정도 느리고<span lang=EN-US>, </span>최대<span
  lang=EN-US> 20</span>배까지 느립니다<span lang=EN-US>. </span>이렇게 느린 수행 시간을 해결하기 위해 다음과
  같은 기술을 사용할 수 있습니다<span lang=EN-US>. </span></span></p>
  <ul style='margin-top:0cm' type=disc>
   <li class=MsoNormal style='text-align:left;word-break:keep-all'><b><span
       lang=EN-US style='font-family:굴림'>JIT(Just-In-Time):</span></b><span
       lang=EN-US style='font-family:굴림'> <br>
       </span><span style='font-family:굴림'>네이티브 코드 생성기를 이용하여 인터프리트 하는 도중에 기계어로 동적으로
       번역합니다<span lang=EN-US>. </span></span></li>
   <li class=MsoNormal style='text-align:left;word-break:keep-all'><span
       lang=EN-US style='font-family:굴림'>HotSpot: <br>
       </span><span style='font-family:굴림'>프로그램을 실행하는 중에 그 실행 형태를 분석하여 병목이 발생하는
       부분을 찾아내어 최적화 시켜 줍니다<span lang=EN-US>. </span></span></li>
   <li class=MsoNormal style='text-align:left;word-break:keep-all'><b><span
       style='font-family:굴림'>자바<span lang=EN-US>-</span>기계어 번역기<span
       lang=EN-US>:</span></span></b><span lang=EN-US style='font-family:굴림'> <br>
       </span><span style='font-family:굴림'>자바 애플리케이션에 대해 바이트코드 대신 기계어 코드를 직접 생성해
       줍니다<span lang=EN-US>. </span></span></li>
   <li class=MsoNormal style='text-align:left;word-break:keep-all'><b><span
       style='font-family:굴림'>컴파일시 최적화<span lang=EN-US>:</span></span></b><span
       lang=EN-US style='font-family:굴림'> <br>
       </span><span style='font-family:굴림'>자바 컴파일러를 이용하여 컴파일 할 때<span
       lang=EN-US> '-O' </span>옵션을 줌으로써 최적화 시켜줍니다<span lang=EN-US>. </span></span></li>
   <li class=MsoNormal style='text-align:left;word-break:keep-all'><b><span
       style='font-family:굴림'>네이티브 메소드<span lang=EN-US>:</span></span></b><span
       lang=EN-US style='font-family:굴림'> <br>
       C</span><span style='font-family:굴림'>와 같이 다른 언어로 작성된 함수를 직접 호출합니다<span
       lang=EN-US>. </span></span></li>
   <li class=MsoNormal style='text-align:left;word-break:keep-all'><b><span
       style='font-family:굴림'>자바 전용 환경<span lang=EN-US>:</span></span></b><span
       lang=EN-US style='font-family:굴림'> <br>
       </span><span style='font-family:굴림'>자바 운영체제 또는 자바 프로세서와 같이 자바를 위한 전용환경을 만들어
       줍니다<span lang=EN-US>. </span></span></li>
  </ul>
  <p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
  style='font-family:굴림'>두 번째<span lang=EN-US>, </span>자바 애플릿을 웹 서버로부터 웹 클라이언트가
  다운로드하여 실행시켜 주게 되는데<span lang=EN-US>, </span>이 때 네트워크 속도가 느리다는 문제가 있습니다<span
  lang=EN-US>. </span>이런 문제점에 대해서는 다음과 같은 기술을 사용하여 해결하려 하고 있습니다<span
  lang=EN-US>. </span></span></p>
  <ul style='margin-top:0cm' type=disc>
   <li class=MsoNormal style='text-align:left;word-break:keep-all'><b><span
       style='font-family:굴림'>압축 파일<span lang=EN-US>(JAR </span>또는<span
       lang=EN-US> ZIP):</span></span></b><span lang=EN-US style='font-family:
       굴림'> <br>
       </span><span style='font-family:굴림'>자바 애플릿을 실행시키기 위해 애플릿을 다운로드해야 하는데<span
       lang=EN-US>, </span>이 때 애플릿에서 사용하는 데이터들도 존재할 수 있습니다<span lang=EN-US>. </span>예를
       들어<span lang=EN-US>, </span>애니메이션을 수행하는 애플릿이 있는<span lang=EN-US> HTML </span>페이지에
       접속하여 그 애플릿을 실행시켜야 할 경우<span lang=EN-US>, </span>해당 애플릿 파일과 애플릿에서 애니메이션을 위해
       사용하는 각 프레임 이미지도 존재할 것입니다<span lang=EN-US>. </span>따라서<span lang=EN-US>, </span>애플릿
       파일은 물론 애플릿에서 사용하는 이미지 파일도 다운로드해야 애플릿에서 제대로 애니메이션을 수행할 수 있겠지요<span
       lang=EN-US>. </span>이 때<span lang=EN-US>, </span>애플릿 실행과 관련된 모든 파일을<span
       lang=EN-US> JAR </span>또는<span lang=EN-US> ZIP </span>형태의 압축 파일로 묶어 전송하게
       됩니다<span lang=EN-US>. </span>이렇게 함으로써<span lang=EN-US>, </span>느린 네트워크를 이용하여
       애플릿과 관련된 파일들을 다운로드 하는데 드는 시간을 줄일 수 있습니다<span lang=EN-US>. </span></span></li>
   <li class=MsoNormal style='text-align:left;word-break:keep-all'><b><span
       style='font-family:굴림'>캐싱<span lang=EN-US>(Caching):</span></span></b><span
       lang=EN-US style='font-family:굴림'> <br>
       </span><span style='font-family:굴림'>다운로드 받은 애플릿과 애플릿 관련 파일들은 웹 클라이언트의 디스크에
       캐싱합니다<span lang=EN-US>. </span>예를 들어<span lang=EN-US>, </span>웹 클라이언트가 애플릿이
       포함된 페이지를 보다가 다른 페이지에 잠깐 들렀다가 애플릿이 포함된 페이지로 다시 돌아올 경우<span lang=EN-US>, </span>애플릿과
       관련된 모든 파일들을 다시 다운로드하는 것이 아니고 웹 클라이언트의 디스크에 캐싱 되어 있는 애플릿 관련 파일들을 사용하게 됩니다<span
       lang=EN-US>. </span>이렇게 함으로써<span lang=EN-US>, </span>느린 네트워크를 이용하여 애플릿과
       관련된 파일들을 다시 다운로드 하는데 걸리는 시간을 없앨 수 있습니다<span lang=EN-US>. </span></span></li>
   <li class=MsoNormal style='text-align:left;word-break:keep-all'><b><span
       style='font-family:굴림'>느린<span lang=EN-US>(lazy) </span>클래스 로딩<span
       lang=EN-US>:</span></span></b><span lang=EN-US style='font-family:굴림'> <br>
       </span><span style='font-family:굴림'>하나의<span lang=EN-US> HTML </span>페이지
       내에 있는 애플릿은 하나의 클래스만을 사용할 경우도 있겠지만<span lang=EN-US>, </span>대부분의 경우 여러 개의
       클래스를 필요에 따라 사용하게 됩니다<span lang=EN-US>. </span>여러 개의 클래스를 사용할 경우<span
       lang=EN-US>, </span>모든 클래스가 동시에 사용되지는 않겠지요<span lang=EN-US>. </span>또한 어떤
       클래스는 정의는 되어있지만<span lang=EN-US>, </span>필요에 따라 전혀 사용되지 않을 수도 있겠지요<span
       lang=EN-US>. </span>따라서<span lang=EN-US>, </span>자바에서는 필요할 경우에만 클래스를 로딩하여
       사용하게 됩니다<span lang=EN-US>. </span>이러한 기술을 느린<span lang=EN-US>(lazy) </span>클래스
       로딩 이라 합니다<span lang=EN-US>. </span></span></li>
  </ul>
  <p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
  style='font-family:굴림'>세 번째<span lang=EN-US>, </span>모호한 언어적 특성<span
  lang=EN-US>, </span>비결정적 자바 가상머신<span lang=EN-US>, </span>표준화된 실시간<span
  lang=EN-US> API</span>가 없는 문제 때문에 실시간 응용이 어렵습니다<span lang=EN-US>. </span>이를 위해<span
  lang=EN-US>, </span>자바에서는 다음과 같은 기술을 개발하고 적용함으로써 실시간 응용을 가능하게 할 수 있습니다<span
  lang=EN-US>. </span></span></p>
  <ul style='margin-top:0cm' type=disc>
   <li class=MsoNormal style='text-align:left;word-break:keep-all'><b><span
       style='font-family:굴림'>모호한 언어 특성의 문제점<span lang=EN-US>:</span></span></b><span
       lang=EN-US style='font-family:굴림'><br>
       </span><span style='font-family:굴림'>이러한 문제는 자바가 스레드 스케줄링 정책 구현에 의존하고<span
       lang=EN-US>, synchronized </span>명령어가 모니터 기반의 동기화 기법만 제공하고 큐 대기 시간을 예측할 수
       없으며<span lang=EN-US>, notify() </span>메소드가 스레드를 깨우는 순서가 불명확하고<span
       lang=EN-US>, </span>우선순위 역전<span lang=EN-US>(priority inversion_</span>의
       가능성이 있습니다<span lang=EN-US>. </span>이러한 문제는<span lang=EN-US> API </span>수준에서
       해결되어야 하고<span lang=EN-US>, </span>실시간 타스크 처리를 위한 우선순위 레벨을 확장하고<span
       lang=EN-US>, </span>우선순위 상속<span lang=EN-US>(priority inheritance) </span>또는
       우선순위 최고 한도 제한<span lang=EN-US>(priority ceiling) </span>등과 같은 우선순위 역전 방지<span
       lang=EN-US> (priority inversion avoidance) </span>프로토콜을 사용하고<span
       lang=EN-US>, MuteX, </span>이진 세마포어<span lang=EN-US>(Binary Semaphore), </span>계수
       세마포어<span lang=EN-US>(Counting Semaphore) </span>등을 사용할 수 있습니다<span
       lang=EN-US>. </span></span></li>
   <li class=MsoNormal style='text-align:left;word-break:keep-all'><b><span
       style='font-family:굴림'>비결정적 자바 가상머신의 문제점<span lang=EN-US>:</span></span></b><span
       lang=EN-US style='font-family:굴림'><br>
       </span><span style='font-family:굴림'>이러한 문제점은 느린<span lang=EN-US>(Lazy) </span>클래스
       로딩에서 발생하거나 메모리 할당과 가비지 콜렉션이 비결정적이고 느린 최악의 경우<span lang=EN-US>(worst-case)
       </span>특성을 가지며<span lang=EN-US> stop-start </span>방식으로 모든 스레드를 멈출 수 있다는 문제점이
       있습니다<span lang=EN-US>. </span>이를 해결하기 위해 클래스를 미리 로딩<span lang=EN-US>(class
       preloading)</span>한다거나 정적 초기화<span lang=EN-US>(static initializer)</span>를
       제거하여 패키지 라이브러리에 대해서는 가상머신 초기화를 사용하고 응용프로그램에서는 명시적인 초기화 를 사용하게 하는 등의 기법을 사용할
       수 있습니다<span lang=EN-US>. </span>그리고<span lang=EN-US>, </span>메모리 할당과 쓰레기
       수집<span lang=EN-US>(garbage collection)</span>에 대해서는 정해진 시간 내에 입터럽트 가능한 쓰레기
       수집을 하는 것입니다<span lang=EN-US>. </span>또는 표준화된 실시간<span lang=EN-US> API</span>를
       제공함으로써 해결할 수 있습니다<span lang=EN-US>. </span>　</span></li>
  </ul>
  </td>
 </tr>
</table>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US>&nbsp;</span></p>

</div>

</body>

</html>
